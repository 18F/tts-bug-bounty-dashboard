# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-06-27 12:19
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('owner', models.ForeignKey(help_text="Individual responsible for the product. Nags will be sent to them if reports aren't closed.", on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProductAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('h1_asset_identifier', models.CharField(help_text='The HackerOne asset identifier; it is probably a URL of some sort, but it can also be the name of a downloadable executable, an app store ID, or a variety of other things depending on the asset type.', max_length=255)),
                ('h1_asset_type', models.CharField(help_text='The HackerOne asset type; can be URL, SOURCE_CODE, or other values that are currently undocumented by H1.', max_length=255)),
                ('product', models.ForeignKey(help_text='The product this asset belongs to.', null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.Product')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('title', models.TextField()),
                ('created_at', models.DateTimeField()),
                ('triaged_at', models.DateTimeField(blank=True, null=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('state', models.CharField(choices=[('new', 'new'), ('triaged', 'triaged'), ('needs-more-info', 'needs-more-info'), ('resolved', 'resolved'), ('not-applicable', 'not-applicable'), ('informative', 'informative'), ('duplicate', 'duplicate'), ('spam', 'spam')], max_length=30)),
                ('asset_identifier', models.CharField(max_length=255, null=True)),
                ('asset_type', models.CharField(max_length=255, null=True)),
                ('is_eligible_for_bounty', models.NullBooleanField()),
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('is_accurate', models.BooleanField(default=True, help_text="Whether we agree with HackerOne's triage assessment.")),
                ('is_false_negative', models.BooleanField(default=False, help_text='Whether HackerOne improperly classified the report as invalid or duplicate.')),
                ('days_until_triage', models.IntegerField(blank=True, help_text='Number of business days between a report being filed and being triaged.', null=True)),
                ('last_nagged_at', models.DateTimeField(blank=True, help_text='When we last contacted the person ultimately responsible for this report, encouraging them to pay attention to it.', null=True)),
                ('next_nag_at', models.DateTimeField(blank=True, help_text='When we should contact the person ultimately responsible for this report, encouraging them to pay attention to it.', null=True)),
                ('last_synced_at', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='SingletonMetadata',
            fields=[
                ('id', models.PositiveIntegerField(primary_key=True, serialize=False)),
                ('last_synced_at', models.DateTimeField(blank=True, help_text='When the dashboard was last synced with HackerOne.', null=True)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='productasset',
            unique_together=set([('h1_asset_identifier', 'h1_asset_type')]),
        ),
        migrations.AlterIndexTogether(
            name='productasset',
            index_together=set([('h1_asset_identifier', 'h1_asset_type')]),
        ),
    ]
